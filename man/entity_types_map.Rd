% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/entity_types.R
\name{entity_types_map}
\alias{entity_types_map}
\alias{entity_types_map,list-method}
\alias{entity_types_map,data.table-method}
\title{Map types returned by DBpedia Spotlight to a limited set of classes}
\usage{
entity_types_map(x, ...)

\S4method{entity_types_map}{list}(x, mapping_vector, other = "MISC", verbose = TRUE)

\S4method{entity_types_map}{data.table}(x, mapping_vector, other = "MISC", verbose = TRUE)
}
\arguments{
\item{x}{A \code{data.table} with DBpedia URIs.}

\item{...}{Further arguments.}

\item{mapping_vector}{A \verb{named character vector} with desired class names (as
names) and types from the DBpedia ontology as values. For example:
c("PERSON" = "DBpedia:Person"). Can contain more than one pair of class and
type.}

\item{other}{a \verb{character vector} with the name of the class of all types not
matched by the \code{mapping_vector}.}

\item{verbose}{A \code{logical} value - whether to display messages.}
}
\value{
Function adds classes to input data.table by reference.
}
\description{
This function takes the output of \code{get_dbpedia_uris()} and compares values in
the \code{types} column with a named character vector. The main purpose of this
function is to reduce the number of types to a limited set of classes.
}
\details{
If there is more than one match between the retrieved types and the
\verb{mapping vector}, unique classes are sorted alphabetically and collapsed.
}
\examples{
library(quanteda)

inaugural_paragraphs <- data_corpus_inaugural \%>\%
  corpus_subset(Year == 2009) \%>\% # limit to Barack Obama 2009
  corpus_reshape(to = "paragraphs")
  
uritab_paragraphs <- get_dbpedia_uris(
  x = inaugural_paragraphs,
  language = "en",
  max_len = 5600L,
  confidence = 0.5,
  api = "http://api.dbpedia-spotlight.org/en/annotate",
  verbose = FALSE,
  progress = TRUE
)

mapping_vector = c(
  "PERSON" = "DBpedia:Person",
  "ORGANIZATION" = "DBpedia:Organisation",
  "LOCATION" = "DBpedia:Place"
)

entity_types_map(
  uritab_paragraphs[["types"]],
  mapping_vector = mapping_vector
)
}
