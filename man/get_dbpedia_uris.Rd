% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbpedia.R
\docType{methods}
\name{get_dbpedia_uris}
\alias{get_dbpedia_uris}
\alias{get_dbpedia_uris,character-method}
\alias{get_dbpedia_uris,AnnotatedPlainTextDocument-method}
\alias{get_dbpedia_uris,subcorpus-method}
\alias{get_dbpedia_uris,subcorpus_bundle-method}
\alias{get_dbpedia_uris,corpus-method}
\alias{get_dbpedia_uris,xml_document-method}
\title{Get DBpedia links.}
\usage{
get_dbpedia_uris(x, ...)

\S4method{get_dbpedia_uris}{character}(
  x,
  language = getOption("dbpedia.lang"),
  max_len = 5600L,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  types_src = c("DBpedia", "Wikidata"),
  verbose = TRUE
)

\S4method{get_dbpedia_uris}{AnnotatedPlainTextDocument}(
  x,
  language = getOption("dbpedia.lang"),
  max_len = 5600L,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  verbose = TRUE
)

\S4method{get_dbpedia_uris}{subcorpus}(
  x,
  language = getOption("dbpedia.lang"),
  p_attribute = "word",
  s_attribute = NULL,
  max_len = 5600L,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  expand_to_token = FALSE,
  drop_inexact_annotations = TRUE,
  verbose = TRUE
)

\S4method{get_dbpedia_uris}{subcorpus_bundle}(
  x,
  language = getOption("dbpedia.lang"),
  p_attribute = "word",
  s_attribute = NULL,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  max_len = 5600L,
  expand_to_token = FALSE,
  verbose = TRUE,
  progress = FALSE
)

\S4method{get_dbpedia_uris}{corpus}(
  x,
  language = getOption("dbpedia.lang"),
  max_len = 5600L,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  verbose = TRUE,
  progress = FALSE
)

\S4method{get_dbpedia_uris}{xml_document}(
  x,
  language = getOption("dbpedia.lang"),
  feature_tag = NULL,
  segment = NULL,
  token_tags = c("w", "pc"),
  text_tag = NULL,
  max_len = 5600L,
  confidence = 0.35,
  api = getOption("dbpedia.endpoint"),
  retry = TRUE,
  logfile = NULL,
  types = character(),
  support = 20,
  expand_to_token = FALSE,
  drop_inexact_annotations = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{x}{A \code{subcorpus} (\code{xml}, ...) object. Will be coerced to
'AnnotatedPlainTextDocument' from NLP package.}

\item{...}{Further arguments.}

\item{language}{The language of the input text ("en", "fr", "de", ...) to
determine the stopwords used.}

\item{max_len}{An \code{integer} value. The text passed to DBpedia Spotlight may
not exceed a defined length. If it does, an HTTP error results. The known
threshold of 5600 characters is the default value.}

\item{confidence}{A \code{numeric} value, the minimum similarity score that serves
as threshold before DBpedia Spotlight includes a link into the report.}

\item{api}{An URL of the DBpedia Spotlight API.}

\item{retry}{A \code{logical} value, whether to retry in case of a http error.}

\item{logfile}{Filename for writing logs (e.g. for debugging purposes).}

\item{types}{A \code{character} vector to restrict result returned to certain
entity types, such as 'Company' or 'Organization'. If the \code{character}
vector is empty (default), no restrictions are applied.}

\item{support}{The number of indegrees at Wikidata. Useful for limiting the
the number of results by excluding insignificant entities.}

\item{types_src}{A \code{character} vector specifying knowledge bases as sources
for entity types. If provided, columns following the pattern '(src)_type'
(e.g. "DBpedia_types") with entity types (\code{NA} if not available) will be
added to the table. Values are wrapped and separated by vertical bars.
\code{types_src} defaults to "DBpedia" and "Wikidata".}

\item{verbose}{A \code{logical} value - whether to display messages.}

\item{p_attribute}{The p-attribute used for decoding a \code{subcorpus} object.}

\item{s_attribute}{A length-one \code{character} vector indicating a s-attribute.
DBpedia URIs will be mapped on this s-attribute. Only regions covered by
this s-attribute will be kept. If missing, URIs will be mapped on the token
stream, and all URIs suggested will be kept.}

\item{expand_to_token}{A \code{logical} value - whether the character offsets of
DBpedia Spotlight are mapped to the token boundaries of the \code{subcorpus} if
the two differ. Also see the explanation in \code{details}. Defaults to FALSE.}

\item{drop_inexact_annotations}{A \code{logical} value - whether to drop entity
annotations when entity spans and token spans do not align exactly.}

\item{progress}{A \code{logical} value - whether to show progress.}

\item{feature_tag}{Name of a tag containing named entities, etc.}

\item{segment}{name of elements to segment document by}

\item{token_tags}{names of elements describing tokens}

\item{text_tag}{name of element that distinguishes text from other elements
such as headers}
}
\value{
A \code{data.table} with the following columns:
\itemize{
\item \emph{dbpedia_uri}: The DBpedia URI.
\item \emph{text}: Text that has been annotated
\item \emph{types}: Recognized entity types, for each row a named list, if available
entries such as 'DBpedia', 'Schema', 'Wikidata', 'DUL'.
Depending on the input object, further columns may be available.
If the request to the endpoint failes, \code{NULL} is returned.
}
}
\description{
Get DBpedia links.
}
\details{
\itemize{
\item \code{expand_to_token} is a rather experimental feature that resolves
mismatches between entity spans and token spans by expanding the former to
the last character position of the corresponding token. See issue #26 in the
\code{dbpedia} GitHub repository.
\item The configuration of the \code{httr::GET()} calls
used can be controlled using \code{httr::config()}. A relevant scenario is SSL
verification issues that can be addressed using
\code{httr::set_config(httr::config(ssl_verifypeer = 0L))} (at own risk!). The
error "HTTP/2 stream 1 was not closed cleanly before end of the underlying
stream" can be addressed using
\code{httr::set_config(httr::config(http_verson = 1.1))}
}
}
\examples{
\dontrun{
# Process AnnotatedPlainTextDocument (example available in NLP package)
doc <- readRDS(system.file("texts", "stanford.rds", package = "NLP"))
tab <- get_dbpedia_uris(x = doc, language = "en")

tab <- get_dbpedia_uris(
  x = doc,
  language = "en",
  api = "http://api.dbpedia-spotlight.org/en/annotate"
)
}

# Use argument types to limit result to certain types

library(polmineR)
use("RcppCWB") # make REUTERS corpus available

reuters_article <- corpus("REUTERS") \%>\%
  subset(id == "127") \%>\%
  get_token_stream(p_attribute = "word", collapse = " ")

uris <- get_dbpedia_uris(
  reuters_article,
  language = "en",
  types = "Company",
  api = "http://api.dbpedia-spotlight.org/en/annotate"
)
library(polmineR)
use("RcppCWB")

uritab <- corpus("REUTERS") \%>\%
  subset(id == "127") \%>\%
  get_dbpedia_uris(
    api = "http://api.dbpedia-spotlight.org/en/annotate",
    language = "en",
    p_attribute = "word"
  )

use("GermaParl2")

uritab2 <- corpus("GERMAPARL2MINI") \%>\%
  subset(speaker_name == "Carlo Schmid") \%>\%
  subset(p_type == "speech") \%>\%
  get_dbpedia_uris(language = "de", s_attribute = "ne", max_len = 5067)
  
uritab <- corpus("REUTERS") \%>\% 
  split(s_attribute = "id", verbose = FALSE) \%>\% 
  get_dbpedia_uris(
    api = "http://api.dbpedia-spotlight.org/en/annotate",
    language = "en",
    p_attribute = "word",
    verbose = TRUE
  )
# example code

# Process quanteda corpus 
library(quanteda)
httr::set_config(httr::config(ssl_verifypeer = 0L, http_version = 1.1))

uritab <- data_char_ukimmig2010 \%>\%
  corpus() \%>\%
  get_dbpedia_uris(verbose = FALSE)
}
